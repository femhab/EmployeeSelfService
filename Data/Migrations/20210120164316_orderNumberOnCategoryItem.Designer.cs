// <auto-generated />
using System;
using Data.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(EmployeeServiceContext))]
    [Migration("20210120164316_orderNumberOnCategoryItem")]
    partial class orderNumberOnCategoryItem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.AppIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Data.Entities.AppliedNameUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApprovalStatus");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AppliedNameUpdates");
                });

            modelBuilder.Entity("Data.Entities.AppliedTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApprovalStatus");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("DepartmentId");

                    b.Property<Guid>("DivisionId");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("SectionId");

                    b.Property<Guid?>("UnitId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UnitId");

                    b.ToTable("AppliedTransfers");
                });

            modelBuilder.Entity("Data.Entities.AppraisalCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppraisalCategoryCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrderNo");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AppraisalCategories");
                });

            modelBuilder.Entity("Data.Entities.AppraisalCategoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppraisalCategoryCode");

                    b.Property<Guid?>("AppraisalCategoryId");

                    b.Property<int>("AppraisalCategoryItemID");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("OrderNo");

                    b.Property<string>("StaffType");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalCategoryId");

                    b.ToTable("AppraisalCategoryItems");
                });

            modelBuilder.Entity("Data.Entities.AppraisalItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppraisalCategoryId");

                    b.Property<Guid>("AppraisalCategoryItemId");

                    b.Property<Guid>("AppraisalRatingId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("EmployeeAppraisalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalCategoryId");

                    b.HasIndex("AppraisalCategoryItemId");

                    b.HasIndex("AppraisalRatingId");

                    b.HasIndex("EmployeeAppraisalId");

                    b.ToTable("AppraisalItems");
                });

            modelBuilder.Entity("Data.Entities.AppraisalPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AppraisalPeriods");
                });

            modelBuilder.Entity("Data.Entities.AppraisalRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppraisalRatingCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("AppraisalRatings");
                });

            modelBuilder.Entity("Data.Entities.ApprovalBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApprovalLevel");

                    b.Property<string>("ApprovalProcessor");

                    b.Property<Guid>("ApprovalProcessorId");

                    b.Property<Guid>("ApprovalWorkItemId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("ServiceId");

                    b.Property<bool>("SignOff");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalWorkItemId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ApprovalBoards");
                });

            modelBuilder.Entity("Data.Entities.ApprovalBoardActiveLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActiveLevel");

                    b.Property<Guid>("ApprovalWorkItemId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("ServiceId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalWorkItemId");

                    b.ToTable("ApprovalBoardActiveLevels");
                });

            modelBuilder.Entity("Data.Entities.ApprovalWorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ApprovalWorkItems");
                });

            modelBuilder.Entity("Data.Entities.AvalaibilityStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Active");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("StatusCode");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AvalaibilityStatus");
                });

            modelBuilder.Entity("Data.Entities.ContractItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContractObjectiveId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EvaluationCiteria");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Remark");

                    b.Property<int>("ScoreAchieved");

                    b.Property<string>("SmartObjective");

                    b.Property<DateTime>("Timeline");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal>("WeightedSore");

                    b.Property<int>("Weighting");

                    b.HasKey("Id");

                    b.HasIndex("ContractObjectiveId");

                    b.ToTable("ContractItems");
                });

            modelBuilder.Entity("Data.Entities.ContractObjective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsAccessed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHRSignedOff");

                    b.Property<bool>("IsSignedOff");

                    b.Property<string>("LineManager");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("SignedOffDate");

                    b.Property<decimal>("TotalWeightedSore");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ContractObjectives");
                });

            modelBuilder.Entity("Data.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Data.Entities.Courtesy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourtesyCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Courtesy");
                });

            modelBuilder.Entity("Data.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanClearEmployeeOnExit");

                    b.Property<string>("CompanyCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeptCode");

                    b.Property<string>("Descc");

                    b.Property<string>("DivisionCode");

                    b.Property<Guid?>("HOD");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Slot");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Data.Entities.DisciplinaryAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Action");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("QueryActionComment");

                    b.Property<DateTime?>("QueryActionDate");

                    b.Property<DateTime>("QueryDate");

                    b.Property<string>("QueryMessage");

                    b.Property<string>("QueryReply");

                    b.Property<DateTime?>("QueryReplyDate");

                    b.Property<string>("QuerySubject");

                    b.Property<Guid>("TargetEmployeeId");

                    b.Property<string>("TargetEmployeeNo");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DisciplinaryActions");
                });

            modelBuilder.Entity("Data.Entities.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descc");

                    b.Property<string>("DivisonCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Data.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DocumentUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RerenceId");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Data.Entities.EducationalGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("EducationalLevelCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("EducationalGrades");
                });

            modelBuilder.Entity("Data.Entities.EducationalLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("EducationalLevels");
                });

            modelBuilder.Entity("Data.Entities.EducationalQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("EducationalLevelCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("EducationalQualifications");
                });

            modelBuilder.Entity("Data.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessType");

                    b.Property<Guid?>("AvalaibilityStatusId");

                    b.Property<Guid?>("CountryId");

                    b.Property<Guid?>("CourtesyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConf");

                    b.Property<Guid?>("DepartmentId");

                    b.Property<Guid?>("DivisionId");

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Emp_No");

                    b.Property<Guid?>("EmployeeTitleId");

                    b.Property<DateTime?>("EmploymentDate");

                    b.Property<string>("FirstName");

                    b.Property<int?>("Gender");

                    b.Property<Guid?>("GradeLevelId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LGAId");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("LocationId");

                    b.Property<Guid?>("MaritalStatusId");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PensionNo");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime?>("PreAppDate");

                    b.Property<DateTime?>("ProRetireDate");

                    b.Property<byte[]>("ProfilePhoto");

                    b.Property<string>("ReportToLineManager");

                    b.Property<Guid?>("SectionId");

                    b.Property<string>("StaffType");

                    b.Property<Guid?>("StateId");

                    b.Property<int>("Status");

                    b.Property<Guid?>("UnitId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserID");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AvalaibilityStatusId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CourtesyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeTitleId");

                    b.HasIndex("GradeLevelId");

                    b.HasIndex("LGAId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StateId");

                    b.HasIndex("UnitId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Data.Entities.EmployeeAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LGOfOrigin");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("State");

                    b.Property<string>("StateOfOrigin");

                    b.Property<int>("Status");

                    b.Property<string>("StreetAddress");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeesAddress");
                });

            modelBuilder.Entity("Data.Entities.EmployeeAppraisal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppraisalPeriodId");

                    b.Property<string>("Counselling");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Development");

                    b.Property<string>("DisciplinaryAction");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastRatingManagerId");

                    b.Property<string>("LastRatingManagerName");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("NextRatingManagerId");

                    b.Property<string>("NextRatingManagerName");

                    b.Property<string>("OtherDetail");

                    b.Property<string>("Promotion");

                    b.Property<string>("Redeployment");

                    b.Property<string>("Strenght");

                    b.Property<decimal>("TotalNetScore");

                    b.Property<decimal>("TotalScore");

                    b.Property<string>("Training");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Weekness");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalPeriodId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAppraisals");
                });

            modelBuilder.Entity("Data.Entities.EmployeeApprovalConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApprovalLevel");

                    b.Property<Guid>("ApprovalWorkItemId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Processor");

                    b.Property<Guid?>("ProcessorIId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalWorkItemId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeesApprovalConfig");
                });

            modelBuilder.Entity("Data.Entities.EmployeeApprovalCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApprovalWorkItemId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MaximumCount");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalWorkItemId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeApprovalCounts");
                });

            modelBuilder.Entity("Data.Entities.EmployeeEducationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Course");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("EducationalGradeId");

                    b.Property<Guid>("EducationalLevelId");

                    b.Property<Guid>("EducationalQualificationId");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Institution");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EducationalGradeId");

                    b.HasIndex("EducationalLevelId");

                    b.HasIndex("EducationalQualificationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeesEducationDetail");
                });

            modelBuilder.Entity("Data.Entities.EmployeeFamilyDependent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PictureUrl");

                    b.Property<Guid>("RelationshipId");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("EmployeeFamilyDependents");
                });

            modelBuilder.Entity("Data.Entities.EmployeeLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnnivessaryLeaveBonus");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LeaveTypeId");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("NoOfDaysUsed");

                    b.Property<int>("NoOfEligibleDays");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("EmployeeLeaves");
                });

            modelBuilder.Entity("Data.Entities.EmployeeNOKDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("Email");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmergencyContact");

                    b.Property<string>("LastName");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PictureUrl");

                    b.Property<Guid>("RelationshipId");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("EmployeeNOKDetails");
                });

            modelBuilder.Entity("Data.Entities.EmployeeTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Slot");

                    b.Property<string>("TitleCode");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTitles");
                });

            modelBuilder.Entity("Data.Entities.ExitProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<DateTime>("ExitDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("NoticeDate");

                    b.Property<string>("Reason");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ExitProcess");
                });

            modelBuilder.Entity("Data.Entities.ExitProcessPriorityItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClearanceDepartmentId");

                    b.Property<string>("ClearanceOfficer");

                    b.Property<string>("Comment");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid?>("DepartmentId");

                    b.Property<DateTime>("EntryDate");

                    b.Property<Guid>("ExitProcess");

                    b.Property<Guid>("ExitProcessId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ExitProcessPriorityItem");
                });

            modelBuilder.Entity("Data.Entities.GradeLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descc");

                    b.Property<string>("GradeCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Slot");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("GradeLevels");
                });

            modelBuilder.Entity("Data.Entities.LGA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LGACode");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("StateCode");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("LGAs");
                });

            modelBuilder.Entity("Data.Entities.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<int?>("DaysUsed");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsAllowanceRequested");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFiveYearsAnniversary");

                    b.Property<bool>("IsTenYearsAnniversary");

                    b.Property<string>("LastProccessedBy");

                    b.Property<int>("LeaveStatus");

                    b.Property<Guid>("LeaveTypeId");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("NoOfDays");

                    b.Property<int?>("RemainingDays");

                    b.Property<DateTime?>("ResumptionDate");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("Data.Entities.LeaveRecall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApprovalStatus");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LeaveId");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("NoOfDays");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("LeaveId");

                    b.ToTable("LeaveRecalls");
                });

            modelBuilder.Entity("Data.Entities.LeaveType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AvailableDays");

                    b.Property<int>("Class");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("GradeLevelId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("GradeLevelId");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("Data.Entities.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountApproved");

                    b.Property<decimal>("AmountRequested");

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InstallmentAmount");

                    b.Property<decimal>("InterestRate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastApprover");

                    b.Property<int>("LoanStatus");

                    b.Property<Guid>("LoanTypeId");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("NoOfInstallment");

                    b.Property<string>("Reason");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LoanTypeId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Data.Entities.LoanType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("LoanTypes");
                });

            modelBuilder.Entity("Data.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNo");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LocationCode");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("StateCode");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Data.Entities.MaritalStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MaritalCode");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("Data.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid?>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGeneral");

                    b.Property<string>("Message");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Data.Entities.PIP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateOfReview");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSignedOff");

                    b.Property<string>("LineManager");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PIPMessage");

                    b.Property<string>("PIPSubject");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PIP");
                });

            modelBuilder.Entity("Data.Entities.PIPItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("PIPId");

                    b.Property<string>("PublishBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("PIPId");

                    b.ToTable("PIPItems");
                });

            modelBuilder.Entity("Data.Entities.PaymentAdvance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastProcessor");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Status");

                    b.Property<DateTime>("TargetDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PaymentAdvances");
                });

            modelBuilder.Entity("Data.Entities.PaymentAdvanceTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PaymentAdvanceTracks");
                });

            modelBuilder.Entity("Data.Entities.Relationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("RoleType");
                });

            modelBuilder.Entity("Data.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeptCode");

                    b.Property<string>("Descc");

                    b.Property<string>("DivisionCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("SectionAccount");

                    b.Property<string>("SectionCode");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Data.Entities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descc");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("StateCode");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZoneCode");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Data.Entities.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmtPerHead");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("HoursPerDay");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsScheduled");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Organizer");

                    b.Property<string>("OtherDetails");

                    b.Property<string>("PictureUrl");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TrainingTopic");

                    b.Property<int>("TrainingYear");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Venue");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("Data.Entities.TrainingCalender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AmtPerHead");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("HRTrainingCalenderID");

                    b.Property<int?>("HoursPerDay");

                    b.Property<bool>("InternalFlag");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("IsInternational");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Organiser");

                    b.Property<DateTime?>("StartDate");

                    b.Property<Guid>("TopicId");

                    b.Property<int?>("TrainingRoomID");

                    b.Property<int?>("TrainingYear");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Username");

                    b.Property<string>("Venue");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("TrainingCalender");
                });

            modelBuilder.Entity("Data.Entities.TrainingNomination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<int>("HRTrainingCalendarID");

                    b.Property<int>("HRTrainingNominationID");

                    b.Property<bool>("IsApplied");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("TrainingCalenderId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TrainingCalenderId");

                    b.ToTable("TrainingNomination");
                });

            modelBuilder.Entity("Data.Entities.TrainingTopics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TrainingTopics");
                });

            modelBuilder.Entity("Data.Entities.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<Guid?>("DivisionId");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<Guid>("ExitingDepartmentId");

                    b.Property<Guid>("ExitingDivisionId");

                    b.Property<Guid>("ExitingUnitId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("ProposedDepartmentId");

                    b.Property<Guid>("ProposedDivisionId");

                    b.Property<Guid>("ProposedUnitId");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExitingDepartmentId");

                    b.HasIndex("ExitingUnitId");

                    b.HasIndex("ProposedDepartmentId");

                    b.HasIndex("ProposedDivisionId");

                    b.HasIndex("ProposedUnitId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Data.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeptCode");

                    b.Property<string>("Descc");

                    b.Property<string>("DivisionCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("Slot");

                    b.Property<string>("UnitCode");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Emp_No");

                    b.Property<Guid>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("RoleId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.Entities.AppliedNameUpdate", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.AppliedTransfer", b =>
                {
                    b.HasOne("Data.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("Data.Entities.AppraisalCategoryItem", b =>
                {
                    b.HasOne("Data.Entities.AppraisalCategory", "AppraisalCategory")
                        .WithMany()
                        .HasForeignKey("AppraisalCategoryId");
                });

            modelBuilder.Entity("Data.Entities.AppraisalItem", b =>
                {
                    b.HasOne("Data.Entities.AppraisalCategory", "AppraisalCategory")
                        .WithMany()
                        .HasForeignKey("AppraisalCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.AppraisalCategoryItem", "AppraisalCategoryItem")
                        .WithMany()
                        .HasForeignKey("AppraisalCategoryItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.AppraisalRating", "AppraisalRating")
                        .WithMany()
                        .HasForeignKey("AppraisalRatingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.EmployeeAppraisal", "EmployeeAppraisal")
                        .WithMany()
                        .HasForeignKey("EmployeeAppraisalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.ApprovalBoard", b =>
                {
                    b.HasOne("Data.Entities.ApprovalWorkItem", "ApprovalWorkItem")
                        .WithMany()
                        .HasForeignKey("ApprovalWorkItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.ApprovalBoardActiveLevel", b =>
                {
                    b.HasOne("Data.Entities.ApprovalWorkItem", "ApprovalWorkItem")
                        .WithMany()
                        .HasForeignKey("ApprovalWorkItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.ContractItem", b =>
                {
                    b.HasOne("Data.Entities.ContractObjective", "ContractObjective")
                        .WithMany()
                        .HasForeignKey("ContractObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.ContractObjective", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.DisciplinaryAction", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.Employee", b =>
                {
                    b.HasOne("Data.Entities.AvalaibilityStatus", "AvalaibilityStatus")
                        .WithMany()
                        .HasForeignKey("AvalaibilityStatusId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Data.Entities.Courtesy", "Courtesy")
                        .WithMany()
                        .HasForeignKey("CourtesyId");

                    b.HasOne("Data.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Data.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("Data.Entities.EmployeeTitle", "EmployeeTitle")
                        .WithMany()
                        .HasForeignKey("EmployeeTitleId");

                    b.HasOne("Data.Entities.GradeLevel", "GradeLevel")
                        .WithMany()
                        .HasForeignKey("GradeLevelId");

                    b.HasOne("Data.Entities.LGA", "LGA")
                        .WithMany()
                        .HasForeignKey("LGAId");

                    b.HasOne("Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Data.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("Data.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.HasOne("Data.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("Data.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("Data.Entities.EmployeeAddress", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.EmployeeAppraisal", b =>
                {
                    b.HasOne("Data.Entities.AppraisalPeriod", "AppraisalPeriod")
                        .WithMany()
                        .HasForeignKey("AppraisalPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.EmployeeApprovalConfig", b =>
                {
                    b.HasOne("Data.Entities.ApprovalWorkItem", "ApprovalWorkItem")
                        .WithMany()
                        .HasForeignKey("ApprovalWorkItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.EmployeeApprovalCount", b =>
                {
                    b.HasOne("Data.Entities.ApprovalWorkItem", "ApprovalWorkItem")
                        .WithMany()
                        .HasForeignKey("ApprovalWorkItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.EmployeeEducationDetail", b =>
                {
                    b.HasOne("Data.Entities.EducationalGrade", "EducationalGrade")
                        .WithMany()
                        .HasForeignKey("EducationalGradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.EducationalLevel", "EducationalLevel")
                        .WithMany()
                        .HasForeignKey("EducationalLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.EducationalQualification", "EducationalQualification")
                        .WithMany()
                        .HasForeignKey("EducationalQualificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.EmployeeFamilyDependent", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.EmployeeLeave", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.EmployeeNOKDetail", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.ExitProcess", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.ExitProcessPriorityItem", b =>
                {
                    b.HasOne("Data.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Data.Entities.Leave", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.LeaveRecall", b =>
                {
                    b.HasOne("Data.Entities.Leave", "Leave")
                        .WithMany()
                        .HasForeignKey("LeaveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.LeaveType", b =>
                {
                    b.HasOne("Data.Entities.GradeLevel", "GradeLevel")
                        .WithMany()
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.Loan", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.LoanType", "LoanType")
                        .WithMany()
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.Notification", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Data.Entities.PIP", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.PIPItem", b =>
                {
                    b.HasOne("Data.Entities.PIP", "PIP")
                        .WithMany()
                        .HasForeignKey("PIPId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.PaymentAdvance", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.PaymentAdvanceTrack", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.Training", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.TrainingCalender", b =>
                {
                    b.HasOne("Data.Entities.TrainingTopics", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.TrainingNomination", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.TrainingCalender", "TrainingCalender")
                        .WithMany()
                        .HasForeignKey("TrainingCalenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.Transfer", b =>
                {
                    b.HasOne("Data.Entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Department", "ExitingDepartment")
                        .WithMany()
                        .HasForeignKey("ExitingDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Unit", "ExitingUnit")
                        .WithMany()
                        .HasForeignKey("ExitingUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Department", "ProposedDepartment")
                        .WithMany()
                        .HasForeignKey("ProposedDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Division", "ProposedDivision")
                        .WithMany()
                        .HasForeignKey("ProposedDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Unit", "ProposedUnit")
                        .WithMany()
                        .HasForeignKey("ProposedUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.HasOne("Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Entities.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Entities.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Entities.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Entities.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
